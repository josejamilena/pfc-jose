# 
#   SERVIDOR AL QUE SE LE HACEN LAS PRUEBAS
#
# Direcci\u00F3n o hostname de la m\u00E1quina servidor de oracle
SERVIDOR_ORACLE = 192.168.2.4
# Puerto de acceso al servidor
PUERTO_ORACLE = 1521
# usuario para la conexi\u00F3n
USUARIO_ORACLE = oracle
# contrase\u00F1a del usuario
PASSWORD_USUARIO = oracle
# base de datos a la que nos conectamos
BD_ORACLE = XE
#
#   ESTADISTICAS
#
# Direcci\u00F3n o hostname de la m\u00E1quina servidor de estadisticas
SERVIDOR_ESTADISTICAS = 192.168.2.4
# Puerto de acceso al servidor de estadisticas
PUERTO_ESTADISTICAS = 1521
# base de datos a la que nos conectamos
BD_ESTADISTICAS = XE
# usuario para la conexi\u00F3n
USUARIO_ESTADISTICAS = oracle
# contrase\u00F1a del usuario
PASSWORD_ESTADISTICAS = oracle
#
#   PLANIFICACION
#
#        2. Scheduling patterns
#        A UNIX crontab-like pattern is a string split in five space separated
#        parts. Each part is intended as:
#
#        1.Minutes sub-pattern. During which minutes of the hour should the task
#          been launched? The values range is from 0 to 59.
#        2.Hours sub-pattern. During which hours of the day should the task been
#          launched? The values range is from 0 to 23.
#        3.Days of month sub-pattern. During which days of the month should the
#          task been launched? The values range is from 0 to 31.
#        4.Months sub-pattern. During which months of the year should the task
#          been launched? The values range is from 1 (January) to 12 (December),
#          otherwise this sub-pattern allows the aliases "jan", "feb", "mar",
#          "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov" and "dec".
#        5.Days of week sub-pattern. During which days of the week should the
#          task been launched? The values range is from 0 (Sunday) to 6 (Saturday),
#          otherwise this sub-pattern allows the aliases "sun", "mon", "tue",
#          "wed", "thu", "fri" and "sat".
#        The star wildcard character is also admitted, indicating "every minute
#        of the hour", "every hour of the day", "every day of the month",
#        "every month of the year" and "every day of the week", according to the
#        sub-pattern in which it is used.
#        Some examples:
#
#        5 * * * *
#        This pattern causes a task to be launched once every hour, at the begin
#        of the fifth minute (00:05, 01:05, 02:05 etc.).
#
#        * * * * *
#        This pattern causes a task to be launched every minute.
#
#        * 12 * * Mon
#        This pattern causes a task to be launched every minute during the 12th
#        hour of Monday.
#
#        * 12 16 * Mon
#        This pattern causes a task to be launched every minute during the 12th
#        hour of Monday, 16th, but only if the day is the 16th of the month.
#
#        Every sub-pattern can contain two or more comma separated values.
#
#        59 11 * * 1,2,3,4,5
#        This pattern causes a task to be launched at 11:59AM on Monday,
#        Tuesday, Wednesday, Thursday and Friday.
#
#        Values intervals are admitted and defined using the minus character.
#
#        59 11 * * 1-5
#        This pattern is equivalent to the previous one.
#
#        The slash character can be used to identify periodic values, in the
#        form a/b. A sub-pattern with the slash character is satisfied when the
#        value on the left divided by the one on the right gives an integer
#        result (a % b == 0).
#
#        */15 9-17 * * *
#        This pattern causes a task to be launched every 15 minutes between the 
#        9th and 17th hour of the day (9:00, 9:15, 9:30, 9:45 and so on... note
#        that the last execution will be at 17:45).
#
#        All the fresh described syntax rules can be used together.
#
#        * 12 10-16/2 * *
#        This pattern causes a task to be launched every minute during the 12th 
#        hour of the day, but only if the day is the 10th, the 12th, the 14th or
#        the16th of the month.
#
#        * 12 1-15,17,20-25 * *
#        This pattern causes a task to be launched every minute during the 12th 
#        hour of the day, but the day of the month must be between the 1st and
#        the 15th, the 20th and the 25, or at least it must be the 17th.
#
#        Finally cron4j lets you combine more scheduling patterns into one, with
#        the pipe character:
#
#        0 5 * * *|8 10 * * *|22 17 * * *
#        This pattern causes a task to be launched every day at 05:00, 10:08 and
#        17:22.
#
#PLANIFICACION = 50 15 * * 0,1,2,3,4,5,6
PLANIFICACION = * * * * *




