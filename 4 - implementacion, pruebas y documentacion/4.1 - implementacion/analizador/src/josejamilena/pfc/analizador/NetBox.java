//   Copyright 2009 Jose Antonio Jamilena Daza
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package josejamilena.pfc.analizador;

import josejamilena.pfc.servidor.tcp.FileReceiver;
import josejamilena.pfc.servidor.tcp.TCPException;
import org.jdesktop.application.Action;

/**
 *
 * @author Jose Antonio Jamilena Daza
 */
public class NetBox extends javax.swing.JDialog {

    /** Creates new form NetBox */
    public NetBox(java.awt.Frame parent) {
        super(parent);
        initComponents();
        getRootPane().setDefaultButton(closeButton);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        hostText = new javax.swing.JTextField();
        portText = new javax.swing.JTextField();
        obtenerEstadisticasButton = new javax.swing.JButton();
        hostLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        icono = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(josejamilena.pfc.analizador.App.class).getContext().getActionMap(NetBox.class, this);
        closeButton.setAction(actionMap.get("closeNetBox")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(josejamilena.pfc.analizador.App.class).getContext().getResourceMap(NetBox.class);
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        hostText.setText(resourceMap.getString("hostText.text")); // NOI18N
        hostText.setName("hostText"); // NOI18N

        portText.setText(resourceMap.getString("portText.text")); // NOI18N
        portText.setToolTipText(resourceMap.getString("portText.toolTipText")); // NOI18N
        portText.setName("portText"); // NOI18N

        obtenerEstadisticasButton.setAction(actionMap.get("obtenerEstadisticas")); // NOI18N
        obtenerEstadisticasButton.setName("obtenerEstadisticasButton"); // NOI18N

        hostLabel.setText(resourceMap.getString("hostLabel.text")); // NOI18N
        hostLabel.setName("hostLabel"); // NOI18N

        portLabel.setText(resourceMap.getString("portLabel.text")); // NOI18N
        portLabel.setToolTipText(resourceMap.getString("portLabel.toolTipText")); // NOI18N
        portLabel.setName("portLabel"); // NOI18N

        icono.setIcon(resourceMap.getIcon("icono.icon")); // NOI18N
        icono.setText(resourceMap.getString("icono.text")); // NOI18N
        icono.setName("icono"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(icono)
                .addContainerGap(129, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hostLabel)
                    .addComponent(portLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(obtenerEstadisticasButton, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(hostText)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(312, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(icono)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hostText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(obtenerEstadisticasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );

        portLabel.getAccessibleContext().setAccessibleDescription(resourceMap.getString("portLabel.AccessibleContext.accessibleDescription")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void closeNetBox() {
        String host = this.hostText.getText();
        int port = 0;
        try {
            port = Integer.parseInt(this.portText.getText());
        } catch (NumberFormatException ex) {
            ;
        }
        if ((!host.isEmpty()) && (port != 0)) {
            this.obtenerEstadisticas();
        } else {
            dispose();
        }
    }

    @Action
    public void obtenerEstadisticas() {
        FileReceiver fc = new FileReceiver();
        String nombreFichero = "";
        String host = this.hostText.getText();
        int port = 0;
        try {
            port = Integer.parseInt(this.portText.getText());
        } catch (NumberFormatException ex) {
            ;
        }
        if ((!host.isEmpty()) && (port != 0)) {
            try {
                // System.err.println(host);
                // System.err.println(port);
                nombreFichero = fc.receive2(host, port);
                // System.err.println(nombreFichero);
                if (nombreFichero.isEmpty()) {
                    new MsgBox("Mensaje de Error",
                            "Fallo de comunicación con el servidor.\n"
                            + "Revise los datos de conexión.", "ERROR");
                } else {
                    App.getApplication().setFicheroEstadisticas(nombreFichero);                
                    if (!App.iniciarConexion()) {
                        new MsgBox("Mensaje de Error",
                                "Formato de fichero erroneo", "ERROR");
                    } else {
                        new MsgBox("OK",
                                "Recepción correcta.", "INFO");
                        dispose();
                    }
                }
            } catch (TCPException ex) {
                new MsgBox("Error de recepción",
                        "Ha ocurrido un error en la comunicación con el HOST "
                        + ex.getMessage(),
                        "ERROR");
            }
        } else {
            new MsgBox("Formato erroneo",
                    "El nombre del HOST o el PUERTO no pueden ser correctos",
                    "WARNING");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostText;
    private javax.swing.JLabel icono;
    private javax.swing.JButton obtenerEstadisticasButton;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portText;
    // End of variables declaration//GEN-END:variables
}
